{"version":3,"sources":["requests.js","axios.js","Row.js","Banner.js","Nav.js","App.js","serviceWorker.js","index.js"],"names":["API_KEY","requests","fetchTrending","fetchNetflixOriginals","fetchTopRated","fetchActionMovies","fetchComedyMovies","fetchHorrorMovies","fetchRomanceMovies","fetchDocumentaries","instance","axios","create","baseURL","Row","title","fetchUrl","isLargeRow","useState","movies","setMovies","trailerUrl","setTrailerUrl","useEffect","a","get","request","data","results","fetchData","console","log","className","map","movie","key","id","onClick","movieTrailer","name","then","url","urlParms","URLSearchParams","URL","search","catch","error","handleClick","src","poster_path","backdrop_path","alt","videoId","opts","height","width","playerVars","autoplay","Banner","str","n","setMovie","Math","floor","random","length","style","backgroundSize","backgroundImage","backgroundPosition","original_name","overview","substr","Nav","show","handleShow","window","addEventListener","scrollY","removeEventListener","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.65a97078.chunk.js","sourcesContent":["const API_KEY = \"5a47cbb6299d8b1fb83b24d3ccbf9b5f\";\n\nconst requests = {\n    fetchTrending:`/trending/all/week?api_key=${API_KEY}&language=en-US`,\n    fetchNetflixOriginals: `/discover/tv?api_key=${API_KEY}&with_network=213`,\n    fetchTopRated: `/movie/top_rated?api_key=${API_KEY}&language=en-US`,\n    fetchActionMovies: `/discover/movie?api_key=${API_KEY}&with_genres=28`,\n    fetchComedyMovies: `/discover/movie?api_key=${API_KEY}&with_genres=35`,\n    fetchHorrorMovies: `/discover/movie?api_key=${API_KEY}&with_genres=27`,\n    fetchRomanceMovies: `/discover/movie?api_key=${API_KEY}&with_genres=10749`,\n    fetchDocumentaries: `/discover/movie?api_key=${API_KEY}&with_genres=99`,\n}\n\nexport default requests;","import axios from \"axios\";\n\n/** base url to make request to the movie database **/\n\nconst instance = axios.create({\n    baseURL: \"https://api.themoviedb.org/3\",\n});\n\n//instance.get('/foo-bar');\n\n//https://api.themoviedb.org/3/foo-bar\n\nexport default instance;","import React,{ useState, useEffect} from 'react';\nimport axios from './axios';\nimport \"./Row.css\";\nimport Youtube from \"react-youtube\";\nimport movieTrailer from \"movie-trailer\";\n\nconst base_url = \"https://image.tmdb.org/t/p/original/\";\n\nfunction Row({title, fetchUrl, isLargeRow}) {\n    const [movies, setMovies] = useState([]);\n    const [trailerUrl, setTrailerUrl] = useState(\"\")\n\n    //a snippet of code which runs based on a specific condition/variable\n    useEffect(() => {\n       // if [],run once when the row loads, and dont run again\n        async function fetchData(){\n            const request = await axios.get(fetchUrl);\n            setMovies(request.data.results);\n            return request;\n        }\n        fetchData();\n    }, [fetchUrl]);\n\n    const opts = {\n        height:\"390\",\n        width:\"100%\",\n        playerVars:{\n\n            autoplay:1,\n        },\n    };\n\n    console.log(movies);\n    const handleClick = (movie) => {\n        if(trailerUrl){\n            setTrailerUrl(\"\");\n        }else{\n            movieTrailer(movie?.name || \"\")\n            .then(url => {\n                 const urlParms = new URLSearchParams(new URL(url).search);\n                 setTrailerUrl(urlParms.get('v'));\n            }).catch(error => console.log(error))\n        }\n    }\n    return (\n        <div className=\"row\">\n            <h2>{title}</h2>\n\n            <div className=\"row_posters\">\n                {movies.map(movie => (\n                    //\"/adfsfggfgdgghhfdghgyfggtyytrttfh.jpg\"\n                    <img\n                        key={movie.id}\n                        onClick={() => handleClick(movie)}\n                        className={`row_poster ${isLargeRow && \"row_posterLarge\"}`}\n                        src={`${base_url}${isLargeRow ? movie.poster_path : movie.backdrop_path}`} alt={movie.name}/>\n                ))}\n            </div>\n            {trailerUrl && <Youtube videoId={trailerUrl} opts={opts} />}\n        </div>\n    )\n}\n\nexport default Row\n","import React, { useState, useEffect } from 'react';\nimport axios from './axios';\nimport requests from './requests';\nimport \"./Banner.css\";\n\nfunction Banner() {\n    const [movie, setMovie] = useState([]);\n\n    useEffect(() => {\n        async function fetchData(){\n            const request = await axios.get(requests.fetchNetflixOriginals);\n            setMovie(\n                request.data.results[\n                    Math.floor(Math.random() * request.data.results.length - 1)\n                ]\n                );\n                return request;\n            // Math.floor(Math.random() * request.data.results.length - 1)\n        }\n        fetchData();\n    }, []);\n\n    function truncate(str, n){\n        return str?.length > n ? str.substr(0, n-1) + \"...\" : str;\n    }\n    return (\n        <header\n         className=\"banner\"\n         style={{\n             backgroundSize: \"cover\",\n             backgroundImage: `url(\n                 \"https://images.tmdb.org/t/p/original/${movie?.backdrop_path}\"\n             )`,\n             backgroundPosition: \"center center\",\n         }}\n         >\n            <div className=\"banner_content\">\n                <h1 className=\"banner_title\"> \n                {movie?.title || movie?.name || movie?.original_name}\n                </h1>\n                <div className=\"banner_buttons\">\n                    <button className=\"banner_button\">Play</button>\n                    <button className=\"banner_button\">My List</button>\n                </div>\n                <h1 className=\"banner_discription\">{truncate(movie?.overview, 150)}</h1>\n            </div>\n            <div className=\"banner_fadeBottom\" />\n        </header>\n    )\n}\n\nexport default Banner\n","import React, { useEffect , useState} from 'react';\nimport \"./Nav.css\";\n\nfunction Nav() {\n    const [show, handleShow] = useState(false);\n    useEffect(() => {\n        window.addEventListener(\"scroll\", () => {\n            if (window.scrollY > 100) {\n                handleShow(true);\n            }else handleShow(false);\n        });\n        return () => {\n            window.removeEventListener(\"scroll\");\n        };\n    }, []);\n    return (\n        <div className={`nav ${show && \"nav_black\"}`}>\n            <img\n            className=\"nav_logo\"\n            src=\"https://upload.wikimedia.org/wikipedia/commons/0/0f/Logo_Netflix.png\"\n            alt=\"netflix-logo\"\n            />\n            <img\n            className=\"nav_avatar\"\n            src=\"https://pbs.twimg.com/profile_images/1240119990411550720/hBEe3tdn_400x400.png\"\n            alt=\"netflix-logo\"\n            />\n        </div>\n    )\n}\n\nexport default Nav\n","import React from 'react';\nimport './App.css';\nimport requests from './requests';\nimport Row from './Row';\nimport Banner from './Banner';\nimport Nav from './Nav';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Nav />\n      <Banner/>\n      <Row \n      title=\"NETFLIX ORIGINALS\" \n      fetchUrl={requests.fetchNetflixOriginals}\n      isLargeRow\n       />\n      <Row title=\"Trending Now\" fetchUrl={requests.fetchTrending}/>\n      <Row title=\"Top Rated\" fetchUrl={requests.fetchTopRated}/>\n      <Row title=\"Action Movies\" fetchUrl={requests.fetchActionMovies}/>\n      <Row title=\"Comedy Movies\" fetchUrl={requests.fetchComedyMovies}/>\n      <Row title=\"Horror Movies\" fetchUrl={requests.fetchHorrorMovies}/>\n      <Row title=\"Romance Movies\" fetchUrl={requests.fetchRomanceMovies}/>\n      <Row title=\"Documentaries\" fetchUrl={requests.fetchDocumentaries}/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}